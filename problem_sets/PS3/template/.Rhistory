sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
X
Y
lm_by_hand <- function(incumbents, difflog, presvote, outcome){
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
?function
?function
lm_by_hand <- function(incumbents, difflog = incumbents$difflog, presvote = incumbents$presvote, ){
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
lm_by_hand <- function(incumbents = incumbents, difflog = incumbents$difflog, presvote = incumbents$presvote){
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
lm_by_hand <- function(incumbents = incumbents, difflog = incumbents$difflog, presvote = incumbents$presvote){
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
lm_by_hand <- function(incumbents, difflog, presvote, voteshare){
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(inputDF)[1]
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents, c("difflog", "presvote"), "voteshare")
}
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
Y <- incumbents[, voteshare]
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[1] <- "intercept"
n <- dim(incumbents)[1]
#create matrices
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]), incumbents[, difflog, presvote]))
# Running linear regression of residuals from Q1 on residuals from Q2
reg_model_q4 <- lm(q1_resid ~ q2_resid, data = incumbents)
reg_model_q4
summary(reg_model_q4) # Summary statistics for the model
# Running linear regression of voteshare on difflog and presvote
reg_model_q5 <- lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)
reg_model_q5
summary(reg_model_q5)
lm_by_hand <- function(inputDF, covariates, outcome){
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
Y <- matrix(incumbents_subset$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
}
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
#load required packages
require(MASS)
lm_by_hand <- function(inputDF, covariates, outcome){
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
Y <- matrix(incumbents_subset$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
}
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
Y <- matrix(incumbents_subset$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
lm_by_hand <- function(inputDF, covariates, outcome){
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
Y <- matrix(incumbents_subset$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
}
lm_by_hand <- function(inputDF, covariates, outcome){
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
Y <- matrix(incumbents_subset$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
}
X <- matrix(c(rep(1,n), incumbents_subset$difflog, incumbents_subset$presvote), ncol=3)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents_subset$presvote), ncol=3)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
Y <- matrix(incumbents$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
Y <- matrix(incumbents$voteshare, ncol=3)
lm_by_hand <- function(incumbents, covariates, outcome){
#load required packages
require(MASS)
#create matrices
n=nrow(Y)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
Y <- matrix(incumbents$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
rownames(betas)[3] <- "intercept"
k <- ncol(X)
#calculate SEs for betas
#estimate sigma-squared
sigma_squared <- sum((Y-X%*%betas)^2)/(nrow(X)-ncol(X))
#create variance-covariance matrix for betas
var_covar_mat <- sigma_squared*solve(t(X)%*%X)
#standard errors for coefficient estimates
SEs <- sqrt(diag(var_covar_mat))
#get t-stat and p-vals
TS <- (betas-0)/SEs
p_values <- 2*pt(abs(TS), n-k, lower.tail=F)
#regression
reg <- lm_by_hand(incumbents_subset, c("difflog", "presvote"), "voteshare")
}
#load required packages
require(MASS)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
X <- matrix(c(rep(1,n), incumbents$difflog, incumbents$presvote), ncol=3)
Y <- matrix(incumbents$voteshare, ncol=3)
dim(X)
#calculate betas
betas <- solve((t(X)%*%X)) %*% (t(X)%*%Y)
X <- as.matrix(cbind(rep(1 , dim(incumbents)[1]), incumbents[,presvote, voteshare]))
X <- as.matrix(cbind(rep(1, dim(inputDF)[1]),inputDF[ , covariates]))
Y <- inputDF[ , outcome ]
lm_by_hand <- function(inputDF, covariates, outcome) {
X <- as.matrix(cbind(rep(1, dim(inputDF)[1]),inputDF[ , covariates]))
Y <- inputDF[ , outcome ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
}
X <- as.matrix(cbind(rep(1, dim(inputDF)[1]),inputDF[ , covariates]))
Y <- inputDF[ , outcome ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
lm_by_hand <- function(inputDF, covariates, outcome) {
X <- as.matrix(cbind(rep(1, dim(inputDF)[1]),inputDF[ , covariates]))
Y <- inputDF[ , outcome ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
}
lm_by_hand <- function(inputDF = incumbents, covariates = incumbents$difflog, incumbents$presvote, outcome = incumbents$voteshare) {
X <- as.matrix(cbind(rep(1, dim(inputDF)[1]),inputDF[ , covariates]))
Y <- inputDF[ , outcome ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
}
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
Y <- incumbents[ , incumbents$voteshare ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
View(X)
lm_by_hand <- function(incumbents, incumbents$difflog, incumbents$presvote, incumbents$voteshare) {
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
Y <- incumbents[ , incumbents$voteshare ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
}
lm_by_hand <- function(incumbents, incumbents$difflog, incumbents$presvote, incumbents$voteshare) {
Y <- incumbents[ , incumbents$voteshare ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
X <- as.matrix(cbind(rep(1, dim(incumbents)[1]),incumbents[ , incumbents$difflog, incumbents$presvote]))
Y <- incumbents[ , incumbents$voteshare ]
betas <- solve((t(X)%*%X))%*%(t(X)%*%Y)
# Plot of diff in campaign spending vs vote share of incumbent
pdf("plotq1.pdf")
plot(incumbents$difflog, incumbents$voteshare, xlab = "Difference in Campaign Spending (%)", ylab = "Incumbent's Vote Share (%)")
abline(reg_model_q1) # Adding regression line
dev.off()
# Plot of diff in campaign spending vs vote share of the presidential candidate of the incumbent's party
pdf("plotq2.pdf")
plot(incumbents$difflog, incumbents$presvote, xlab = "Difference in Campaign Spending (%)", ylab = "Vote Share of Pres. Candidate of Incumbent's Party (%)")
abline(reg_model_q2) # Adding regression line
dev.off()
cor(incumbents$voteshare ~ incumbents$voteshare)
cor(incumbents$difflog, incumbents$voteshare)
cor(incumbents$difflog, incumbents$presvote)
# Plot of vote share of the presidential candidate of the incumbent's party vs incumbent's vote share
pdf("plotq3.pdf")
plot(incumbents$voteshare, incumbents$presvote, xlab = "Vote Share of Pres. Candidate of Incumbent's Party (%)", ylab = "Incumbent's Vote Share (%)")
abline(reg_model_q3) # Adding regression line
dev.off()
cor(incumbents$voteshare, incumbents$presvote)
cor(incumbents$difflog, incumbents$presvote)
cor(incumbents$difflog, incumbents$voteshare) # Correlation Coefficient =
# Plot of the two residuals
pdf("plotq4.pdf")
plot(q2_resid, q1_resid, xlab = "Residuals from Question 2", ylab = "Residuals from Question 1")
abline(reg_model_q4) # Adding regression line
dev.off()
cor(q2_resid, q1_resid)
reg_model_q3
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
setwd("/Users/jasminlim/Documents/GitHub/QTM200Spring2020/problem_sets/PS3/template")
incumbents <- read.csv("incumbents_subset.csv") # Importing dataset
# Running linear regression of vote share of incumbent on diff in campaign spending
reg_model_q1 <- lm(voteshare ~ difflog, data = incumbents)
reg_model_q1
summary(reg_model_q1) # Summary statistics for the model
# Plot of diff in campaign spending vs vote share of incumbent
pdf("plotq1.pdf")
plot(incumbents$difflog, incumbents$voteshare, xlab = "Difference in Campaign Spending (%)", ylab = "Incumbent's Vote Share (%)")
abline(reg_model_q1) # Adding regression line
dev.off()
cor(incumbents$difflog, incumbents$voteshare) # Correlation coefficient = 0.606
# 3.
q1_resid <- reg_model_q1$residuals # Storing residuals as separate object
# Running linear regression of vote share of the presidential candidate of the incumbent's party on diff in campaign spending
reg_model_q2 <- lm(presvote ~ difflog, data = incumbents)
reg_model_q2
summary(reg_model_q2) # Summary statistics for the model
# Plot of diff in campaign spending vs vote share of the presidential candidate of the incumbent's party
pdf("plotq2.pdf")
plot(incumbents$difflog, incumbents$presvote, xlab = "Difference in Campaign Spending (%)", ylab = "Vote Share of Pres. Candidate of Incumbent's Party (%)")
abline(reg_model_q2) # Adding regression line
dev.off()
cor(incumbents$difflog, incumbents$presvote) # Correlation coefficient = 0.297
# 3.
q2_resid <- reg_model_q2$residuals # Storing residuals as separate object
# Running linear regression of incumbent's vote share on vote share of the presidential candidate of the incumbent's party
reg_model_q3 <- lm(voteshare ~ presvote, data = incumbents)
reg_model_q3
summary(reg_model_q3) # Summary statistics for the model
# Plot of vote share of the presidential candidate of the incumbent's party vs incumbent's vote share
pdf("plotq3.pdf")
plot(incumbents$voteshare, incumbents$presvote, xlab = "Vote Share of Pres. Candidate of Incumbent's Party (%)", ylab = "Incumbent's Vote Share (%)")
abline(reg_model_q3) # Adding regression line
dev.off()
cor(incumbents$voteshare, incumbents$presvote) # Correlation coefficient = 0.454
# 3.
q3_resid <- reg_model_q3$residuals # Storing residuals as separate object
# Running linear regression of residuals from Q1 on residuals from Q2
reg_model_q4 <- lm(q1_resid ~ q2_resid, data = incumbents)
reg_model_q4
summary(reg_model_q4) # Summary statistics for the model
# Plot of the two residuals
pdf("plotq4.pdf")
plot(q2_resid, q1_resid, xlab = "Residuals from Question 2", ylab = "Residuals from Question 1")
abline(reg_model_q4) # Adding regression line
dev.off()
cor(q2_resid, q1_resid) # Correlation coefficient = 0.361
# Running linear regression of voteshare on difflog and presvote
reg_model_q5 <- lm(incumbents$voteshare ~ incumbents$difflog + incumbents$presvote)
reg_model_q5
summary(reg_model_q5) # Summary statistics of the model
# 2.
# 3.
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
# 3.
# The residuals are the same because
