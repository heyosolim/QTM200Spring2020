hi = 3
hi
y <- 44 %% 5
y
z <- 44 %/% 5
z
hi <- mean(2, 3)
hi
hi <- mean(c(2, 3)
hi <- mean(c(2, 3)
hi <- mean(c(2, 3))
hi
?seq
x <- seq(1, 8)
x
x <- seq(1, 11, 2)
x
x <- seq(1, 11, 2)
y <- c(2, 4, 6, 8, 10, 100)
xy <- c(x, y)
xy
x <- seq(1, 11, 2)
y <- c(2, 4, 6, 8, 10, 100)
xy <- c(x, y)
xy
xy <- c(x+ y)
xy
xy <- c(y,x)
xy
?rep
some.numbers <- c(seq(4, 12, 2), rep(8, 7), c(1:5))
some.numbers
some.numbers[4, 8, 11]
some.numbers[4, 8, 11]
some.numbers[c(4, 8, 11)]
some.numbers[c(6:12)]
some.numbers
read.csv("temperature.csv")
temp <- read.csv("temperature.csv")
getwd()
names(temp)
View(temp)
dim(temp)
summary(temp)
head(temp)
tail(temp)
bribe_study <- matrix(c(14, 6, 7, 7, 7, 1), byrow = T, nrow = 2)
bribe_study
rownames(c("Upper class", "Lower class"))
rownames(bribe_study) <- c("Upper class", "Lower class"))
rownames(bribe_study) <- c("Upper class", "Lower class")
colnames(bribe_study) <- c("Not stopped", "Bribe requested", "Stopped/given warning")
bribe_study
expected_count <- bribe_study
8%/%3 # int of the division
1:20
# Making vectors
vector <- c(1:20)
rep()
?reo
?rep
rep(2, 5)
?seq
seq(1, 17, 2)
seq(1, 18, 2)
vector[-2]
vector[5]
vector[1:5]
vector[1:5:2]
vector[1:18:2]
vector[1:18]
mean(vector)
var(vector)
sqrt(vector)
sd(vector)
# Inspecting datasets
temp <- read.csv("temperature.csv")
temp
names(temp)
View(temp)
View(temp)
dim(temp)
summary(dataset)
summary(temp)
str(temp)
head(dataset)
head(temp)
sex_vector <- c("Male", "Female", "Male", "Female", "Male")
factor_sex_vect <- factor(sex_vector)
factor_sex_vect
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
summary(survey_vector)
summary(factor_survey_vector)
factor_speed_vector <- factor(speed-vector, ordered = T, levels = c("slow", "medium", "fast")
# Creating ordered factor vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed-vector, ordered = T, levels = c("slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = T, levels = c("slow", "medium", "fast")
factor_speed_vector
# Creating ordered factor vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = T, levels = c("slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = T, levels = c("slow", "medium", "fast"))
factor_speed_vector
# Creating ordered factor vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = T, levels = c("slow", "medium", "fast"))
factor_speed_vector
# Now I can compare!
da2 <- factor_speed_vector[2]
da5 <- factor_speed_vector[5]
factor_speed_vector
# Now I can compare!
da2 <- factor_speed_vector[2]
da5 <- factor_speed_vector[5]
da2 > da5
# Vectors of same length
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
data.frame(name, type, diameter, rotation, rings)
planets_df <- data.frame(name, type, diameter, rotation, rings)
str(planets_df)
# Selecting entries
planets_df[1,2]
planets_df[1:3, 1;3]
planets_df[1:3, 1:3]
planets_df[1:5, "type"]
planets_df$name
planets_df[planets_df$rings, ]
subset(planets_df, subset = rings) # easier way: make a subset
subset(planets_df, subset = type == "Gas giant")
subset(planets_df, subset = type == "Terrestrial planet")
a <- c(10, 1000, 100)
order(a)
a[order(a)]
# a)
bribe_study <- matrix(c(14, 6, 7, 7, 7, 1), byrow = T, nrow = 2)
bribe_study
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
setwd("/Users/jasminlim/Documents/GitHub/QTM200Spring2020/problem_sets/PS2/")
# a)
bribe_study <- matrix(c(14, 6, 7, 7, 7, 1), byrow = T, nrow = 2)
bribe_study
rownames(bribe_study) <- c("Upper class", "Lower class")
colnames(bribe_study) <- c("Not stopped", "Bribe requested", "Stopped/given warning")
bribe_study
expected_count <- bribe_study
bribe_study
View(detachAllPackages)
lapply(c(),  pkgTest)
getwd()
setwd("/Users/jasminlim/Documents/GitHub/QTM200Spring2020/problem_sets/PS2/")
getwd()
plot(fruitfly$thorax, fruitfly$lifespan, main = NULL, xlab = "Thorax (mm)", ylab = "Lifespan (days)") # Moderately linear
# 1.
fruitfly <- read.csv("fruitfly.csv", header = T) # Importing dataset
# 2.
pdf("template/thorax_lifespan.pdf") # Plot for lifespan vs. thorax
plot(fruitfly$thorax, fruitfly$lifespan, main = NULL, xlab = "Thorax (mm)", ylab = "Lifespan (days)") # Moderately linear
dev.off()
